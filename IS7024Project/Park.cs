// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var park = Park.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Park
    {
        [JsonProperty("ACRES")]
        public string Acres { get; set; }

        [JsonProperty("COUNTY")]
        public County County { get; set; }

        [JsonProperty("GLOBALID")]
        public string Globalid { get; set; }

        [JsonProperty("NAME")]
        public string Name { get; set; }

        [JsonProperty("PARKTYPE")]
        public Parktype Parktype { get; set; }

        [JsonProperty("SHORT_NAME")]
        public string ShortName { get; set; }
    }

    public enum County { Boone, Butler, Campbell, Clermont, Clinton, Dearborn, Greene, Hamilton, Kenton, Kentucky, Preble, Warren };

    public enum Parktype { CityOrVillage, ConservancyDistrict, ConservationGroups, Industrial, Institutional, ParkDistrict, State, Township, Unknown };

    public partial class Park
    {
        public static Park[] FromJson(string json) => JsonConvert.DeserializeObject<Park[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Park[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CountyConverter.Singleton,
                ParktypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CountyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(County) || t == typeof(County?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Boone":
                    return County.Boone;
                case "Butler":
                    return County.Butler;
                case "Campbell":
                    return County.Campbell;
                case "Clermont":
                    return County.Clermont;
                case "Clinton":
                    return County.Clinton;
                case "Dearborn":
                    return County.Dearborn;
                case "Greene":
                    return County.Greene;
                case "Hamilton":
                    return County.Hamilton;
                case "Kenton":
                    return County.Kenton;
                case "Kentucky":
                    return County.Kentucky;
                case "Preble":
                    return County.Preble;
                case "Warren":
                    return County.Warren;
            }
            throw new Exception("Cannot unmarshal type County");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (County)untypedValue;
            switch (value)
            {
                case County.Boone:
                    serializer.Serialize(writer, "Boone");
                    return;
                case County.Butler:
                    serializer.Serialize(writer, "Butler");
                    return;
                case County.Campbell:
                    serializer.Serialize(writer, "Campbell");
                    return;
                case County.Clermont:
                    serializer.Serialize(writer, "Clermont");
                    return;
                case County.Clinton:
                    serializer.Serialize(writer, "Clinton");
                    return;
                case County.Dearborn:
                    serializer.Serialize(writer, "Dearborn");
                    return;
                case County.Greene:
                    serializer.Serialize(writer, "Greene");
                    return;
                case County.Hamilton:
                    serializer.Serialize(writer, "Hamilton");
                    return;
                case County.Kenton:
                    serializer.Serialize(writer, "Kenton");
                    return;
                case County.Kentucky:
                    serializer.Serialize(writer, "Kentucky");
                    return;
                case County.Preble:
                    serializer.Serialize(writer, "Preble");
                    return;
                case County.Warren:
                    serializer.Serialize(writer, "Warren");
                    return;
            }
            throw new Exception("Cannot marshal type County");
        }

        public static readonly CountyConverter Singleton = new CountyConverter();
    }

    internal class ParktypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Parktype) || t == typeof(Parktype?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "City or Village":
                    return Parktype.CityOrVillage;
                case "Conservancy District":
                    return Parktype.ConservancyDistrict;
                case "Conservation Groups":
                    return Parktype.ConservationGroups;
                case "Industrial":
                    return Parktype.Industrial;
                case "Institutional":
                    return Parktype.Institutional;
                case "Park District":
                    return Parktype.ParkDistrict;
                case "State":
                    return Parktype.State;
                case "Township":
                    return Parktype.Township;
                case "Unknown":
                    return Parktype.Unknown;
            }
            throw new Exception("Cannot unmarshal type Parktype");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Parktype)untypedValue;
            switch (value)
            {
                case Parktype.CityOrVillage:
                    serializer.Serialize(writer, "City or Village");
                    return;
                case Parktype.ConservancyDistrict:
                    serializer.Serialize(writer, "Conservancy District");
                    return;
                case Parktype.ConservationGroups:
                    serializer.Serialize(writer, "Conservation Groups");
                    return;
                case Parktype.Industrial:
                    serializer.Serialize(writer, "Industrial");
                    return;
                case Parktype.Institutional:
                    serializer.Serialize(writer, "Institutional");
                    return;
                case Parktype.ParkDistrict:
                    serializer.Serialize(writer, "Park District");
                    return;
                case Parktype.State:
                    serializer.Serialize(writer, "State");
                    return;
                case Parktype.Township:
                    serializer.Serialize(writer, "Township");
                    return;
                case Parktype.Unknown:
                    serializer.Serialize(writer, "Unknown");
                    return;
            }
            throw new Exception("Cannot marshal type Parktype");
        }

        public static readonly ParktypeConverter Singleton = new ParktypeConverter();
    }
}
